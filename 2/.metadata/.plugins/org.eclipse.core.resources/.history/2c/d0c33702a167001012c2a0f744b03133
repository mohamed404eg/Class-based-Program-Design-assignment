


 interface IMotif {

}


class CrossStitchMotif implements IMotif {
	String description;
	double    difficulty;
	
	
	CrossStitchMotif(String description, double difficulty){
		this.description = description;
		this.difficulty  = difficulty;
	}
	
}

class ChainStitchMotif implements IMotif {
	String description;
	double    difficulty;
	
	
	ChainStitchMotif(String description, double difficulty){
		this.description = description;
		this.difficulty  = difficulty;
	}
	
}


class GroupMotif  implements IMotif {
	String description;
	ILoMotif    motifs;
	
	GroupMotif(String description, ILoMotif motifs){
		this.description = description;
		this.motifs  = motifs;
	}
	
}

interface ILoMotif {
	
}

class MtLoMotif implements ILoMotif{
	MtLoMotif(){}
	
}

class ConLoMotif implements ILoMotif{
	IMotif first;
	ILoMotif rest;
	
	ConLoMotif(IMotif first, ILoMotif rest){
		this.first = first;
		this.rest = rest;
		
	}
	
}




class EmbroideryPiece {
	String name;
	IMotif motif;
	
	EmbroideryPiece(String name, IMotif motif){
		this.name  = name;
		this.motif = motif;
	}
}


 class ExamplesEmbroidery {
	ExamplesEmbroidery(){}
	
	IMotif bird = new CrossStitchMotif("bird",4.5);
	IMotif tree = new ChainStitchMotif("tree",3.0);
	
	IMotif rose = new CrossStitchMotif("rose",5.0);
	IMotif poppy = new ChainStitchMotif("poppy",4.75);
	IMotif daisy = new CrossStitchMotif("daisy",3.2);
	
	ILoMotif lomFlowers = new ConLoMotif(rose,new ConLoMotif(poppy,new ConLoMotif(daisy,new MtLoMotif())));
	
	IMotif gFlowers = new GroupMotif("flowers",lomFlowers);

	
	ILoMotif lomNature = new ConLoMotif(bird,new ConLoMotif(tree, lomFlowers));
	
	IMotif gNature = new GroupMotif("nature", lomNature);
	
	EmbroideryPiece pillowCover = new EmbroideryPiece("Pillow Cover",gNature);
	
	
	
	
}
