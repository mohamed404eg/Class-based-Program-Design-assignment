import tester.*;



 interface IMotif {

	 double averageDifficulty();
	 int count();
}


class CrossStitchMotif implements IMotif {
	String description;
	double    difficulty;
	
	
	CrossStitchMotif(String description, double difficulty){
		this.description = description;
		this.difficulty  = difficulty;
	}
	
	public double averageDifficulty() {
		return difficulty;
	}
	
	public int count() {
		return 1;
	}
}

class ChainStitchMotif implements IMotif {
	String description;
	double    difficulty;
	
	
	ChainStitchMotif(String description, double difficulty){
		this.description = description;
		this.difficulty  = difficulty;
	}
	
	
	public double averageDifficulty() {
		return difficulty;
	}
	
	public int count() {
		return 1;
	}
	
}


class GroupMotif  implements IMotif {
	String description;
	ILoMotif    motifs;
	
	GroupMotif(String description, ILoMotif motifs){
		this.description = description;
		this.motifs  = motifs;
	}
	
	public double averageDifficulty() {
		return motifs.averageDifficulty();
	}
	
	public int count() {
		return motifs.count();
	}
}

interface ILoMotif {
	double averageDifficulty();
	int count();
}

class MtLoMotif implements ILoMotif{
	MtLoMotif(){}
	
	public double averageDifficulty() {
		return 0;
	}
	public int count() {
		return 0;
	};
}

class ConLoMotif implements ILoMotif{
	IMotif first;
	ILoMotif rest;
	
	ConLoMotif(IMotif first, ILoMotif rest){
		this.first = first;
		this.rest = rest;
		
	}
	
	/*Template:
	 * Fileds:
	 * ... this.first  ...    --- IMotif
	 * ... this.rest   ...    --- ILoMotif
	 * 
	 * Methods Fileds:
	 * ... this.first.averageDifficulty()  ...    --- double
	 *  ... this.rest.averageDifficulty()  ...    --- double
	 */
	
	public double averageDifficulty() {
		return first.averageDifficulty() + rest.averageDifficulty() / 
	}
	
	/*Template:
	 * Fileds:
	 * ... this.first  ...    --- IMotif
	 * ... this.rest   ...    --- ILoMotif
	 * 
	 * Methods Fileds:
	 * ... this.first.averageDifficulty()  ...    --- double
	 *  ... this.rest.averageDifficulty()  ...    --- double
	 * ... this.first.count() 			   ...    --- int
	 *  ... this.rest.count()              ...    --- int
	 */
	
	public int count() {
		return 0;
	};
	
	
}




class EmbroideryPiece {
	String name;
	IMotif motif;
	
	EmbroideryPiece(String name, IMotif motif){
		this.name  = name;
		this.motif = motif;
	}
	
	//  computes the average difficulty of all motif
	double averageDifficulty() {
		return motif.averageDifficulty();
	}
	
	int count() {
		return motif.count();
	}
}


 class ExamplesEmbroidery {
	ExamplesEmbroidery(){}
	
	IMotif bird = new CrossStitchMotif("bird",4.5);
	IMotif tree = new ChainStitchMotif("tree",3.0);
	
	IMotif rose = new CrossStitchMotif("rose",5.0);
	IMotif poppy = new ChainStitchMotif("poppy",4.75);
	IMotif daisy = new CrossStitchMotif("daisy",3.2);
	
	ILoMotif lomFlowers = new ConLoMotif(rose,new ConLoMotif(poppy,new ConLoMotif(daisy,new MtLoMotif())));
	
	IMotif gFlowers = new GroupMotif("flowers",lomFlowers);

	
	ILoMotif lomNature = new ConLoMotif(bird,new ConLoMotif(tree, lomFlowers));
	
	IMotif gNature = new GroupMotif("nature", lomNature);
	
	EmbroideryPiece pillowCover = new EmbroideryPiece("Pillow Cover",gNature);
	
	
	
	boolean testIMotif(Tester t) {
		return t.checkExpect(bird.count(), 1) &&
				t.checkExpect(tree.count(), 1) && 
				t.checkExpect(gFlowers.count(), 3);
	}
	
	boolean testILoMotif(Tester t) {
		return t.checkExpect(lomFlowers.count(), 3) &&
				t.checkExpect(new MtLoMotif(), 0);
	}
	

	boolean testEmbroideryPiece(Tester t) {
		return t.checkExpect(pillowCover.count(), 5);
	}
}
